def SolutionDFS(a, b, target):
    m = {}
    isSolvable = False
    path = []

    stack = []

    # Initializing with jugs being empty
    stack.append((0, 0))

    while (len(stack) > 0):

        # Current state
        u = stack.pop()
        if ((u[0], u[1]) in m):
            continue
        if ((u[0] > a or u[1] > b or u[0] < 0 or u[1] < 0)):
            continue
        path.append([u[0], u[1]])

        m[(u[0], u[1])] = 1

        if (u[0] == target or u[1] == target):
            isSolvable = True

            if (u[0] == target):
                if (u[1] != 0):
                    path.append([u[0], 0])
            else:
                if (u[0] != 0):
                    path.append([0, u[1]])

            sz = len(path)
            for i in range(sz):
                print("(", path[i][0], ",", path[i][1], ")")
            break

        for ap in range(max(a, b) + 1):
            c = u[0] + ap
            d = u[1] - ap

            if (c == a or (d == 0 and d >= 0)):
                stack.append([c, d])

            c = u[0] - ap
            d = u[1] + ap

            if ((c == 0 and c >= 0) or d == b):
                stack.append([c, d])

        stack.append([a, u[1]]) # Fill Jug1
        stack.append([u[0], b]) # Fill Jug2
        stack.append([a, 0]) # Empty Jug1
        stack.append([0, u[1]]) # Empty Jug2

    if (not isSolvable):
        print("Solution not possible")
        
SolutionDFS(5,4,2)

